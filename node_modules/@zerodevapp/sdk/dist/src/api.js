"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPrivateKeyByToken = exports.getProjectConfiguration = exports.getChainId = exports.signUserOp = void 0;
const constants = __importStar(require("./constants"));
const signUserOp = async (projectId, chainId, userOp, paymasterUrl) => {
    const resp = await fetch(`${paymasterUrl !== null && paymasterUrl !== void 0 ? paymasterUrl : constants.PAYMASTER_URL}/sign`, {
        method: 'POST',
        body: JSON.stringify({
            projectId,
            chainId,
            userOp: userOp,
        }),
        headers: { 'Content-Type': 'application/json' },
    });
    const { paymasterAndData } = await resp.json();
    return paymasterAndData;
};
exports.signUserOp = signUserOp;
const getChainId = async (projectId, backendUrl) => {
    const resp = await fetch(`${backendUrl !== null && backendUrl !== void 0 ? backendUrl : constants.BACKEND_URL}/v1/projects/get-chain-id`, {
        method: 'POST',
        body: JSON.stringify({
            projectId: projectId,
        }),
        headers: { 'Content-Type': 'application/json' },
    });
    const { chainId } = await resp.json();
    return chainId;
};
exports.getChainId = getChainId;
const getProjectConfiguration = async (projectId, backendUrl) => {
    const resp = await fetch(`${backendUrl !== null && backendUrl !== void 0 ? backendUrl : constants.BACKEND_URL}/v1/projects/${projectId}`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
    });
    return await resp.json();
};
exports.getProjectConfiguration = getProjectConfiguration;
const getPrivateKeyByToken = async (projectId, identity, token, backendUrl) => {
    const resp = await fetch(`${backendUrl !== null && backendUrl !== void 0 ? backendUrl : constants.BACKEND_URL}/v1/keys/get-by-token`, {
        method: 'POST',
        body: JSON.stringify({
            projectId,
            identity,
            token,
        }),
        headers: { 'Content-Type': 'application/json' },
    });
    const { privateKey } = await resp.json();
    return privateKey;
};
exports.getPrivateKeyByToken = getPrivateKeyByToken;
//# sourceMappingURL=api.js.map