"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.asZeroDevSigner = exports.isZeroDevSigner = exports.getZeroDevSigner = exports.getZeroDevProvider = exports.getSocialWalletOwner = exports.getRPCProviderOwner = exports.getPrivateKeyOwner = exports.ZeroDevProvider = exports.AssetType = exports.ZeroDevSigner = void 0;
require("@ethersproject/shims");
const buffer_1 = require("buffer");
const ethers_1 = require("ethers");
const utils_1 = require("./utils");
const api = __importStar(require("./api"));
const constants = __importStar(require("./constants"));
const paymaster_1 = require("./paymaster");
const ZeroDevSigner_1 = require("./ZeroDevSigner");
const Provider_1 = require("./Provider");
const accounts_1 = require("./accounts");
global.Buffer = buffer_1.Buffer;
var ZeroDevSigner_2 = require("./ZeroDevSigner");
Object.defineProperty(exports, "ZeroDevSigner", { enumerable: true, get: function () { return ZeroDevSigner_2.ZeroDevSigner; } });
Object.defineProperty(exports, "AssetType", { enumerable: true, get: function () { return ZeroDevSigner_2.AssetType; } });
var ZeroDevProvider_1 = require("./ZeroDevProvider");
Object.defineProperty(exports, "ZeroDevProvider", { enumerable: true, get: function () { return ZeroDevProvider_1.ZeroDevProvider; } });
var owner_1 = require("./owner");
Object.defineProperty(exports, "getPrivateKeyOwner", { enumerable: true, get: function () { return owner_1.getPrivateKeyOwner; } });
Object.defineProperty(exports, "getRPCProviderOwner", { enumerable: true, get: function () { return owner_1.getRPCProviderOwner; } });
Object.defineProperty(exports, "getSocialWalletOwner", { enumerable: true, get: function () { return owner_1.getSocialWalletOwner; } });
async function getZeroDevProvider(params) {
    const chainId = await api.getChainId(params.projectId, constants.BACKEND_URL);
    const provider = new ethers_1.ethers.providers.JsonRpcProvider(params.rpcProviderUrl || (0, utils_1.getRpcUrl)(chainId));
    const aaConfig = {
        projectId: params.projectId,
        chainId,
        entryPointAddress: constants.ENTRYPOINT_ADDRESS,
        bundlerUrl: params.bundlerUrl || constants.BUNDLER_URL,
        paymasterAPI: new paymaster_1.VerifyingPaymasterAPI(params.projectId, constants.PAYMASTER_URL, chainId),
        hooks: params.hooks,
        walletAddress: params.address,
        index: params.index,
        implementation: params.implementation || accounts_1.gnosisSafeAccount_unaudited
    };
    const aaProvider = await (0, Provider_1.wrapProvider)(provider, aaConfig, params.owner);
    return aaProvider;
}
exports.getZeroDevProvider = getZeroDevProvider;
async function getZeroDevSigner(params) {
    const aaProvider = await getZeroDevProvider(params);
    const aaSigner = aaProvider.getSigner();
    return aaSigner;
}
exports.getZeroDevSigner = getZeroDevSigner;
// Check if a signer is a ZeroDevSigner
async function isZeroDevSigner(signer) {
    return signer instanceof ZeroDevSigner_1.ZeroDevSigner;
}
exports.isZeroDevSigner = isZeroDevSigner;
// Typecast a signer to a ZeroDevSigner, or throw if it's not a ZeroDevSigner
function asZeroDevSigner(signer) {
    if (!(signer instanceof ZeroDevSigner_1.ZeroDevSigner)) {
        throw new Error('not a ZeroDevSigner');
    }
    return signer;
}
exports.asZeroDevSigner = asZeroDevSigner;
//# sourceMappingURL=index.js.map