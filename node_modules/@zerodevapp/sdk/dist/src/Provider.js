"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapProvider = void 0;
const contracts_1 = require("@zerodevapp/contracts");
const ZeroDevProvider_1 = require("./ZeroDevProvider");
const HttpRpcClient_1 = require("./HttpRpcClient");
const debug_1 = __importDefault(require("debug"));
const ethers_1 = require("ethers");
const utils_1 = require("./utils");
const BaseAccountAPI_1 = require("./BaseAccountAPI");
const debug = (0, debug_1.default)('aa.wrapProvider');
/**
 * wrap an existing provider to tunnel requests through Account Abstraction.
 * @param originalProvider the normal provider
 * @param config see ClientConfig for more info
 * @param originalSigner use this signer as the owner. of this wallet. By default, use the provider's signer
 */
async function wrapProvider(originalProvider, config, originalSigner = originalProvider.getSigner()) {
    const entryPoint = contracts_1.EntryPoint__factory.connect(config.entryPointAddress, originalProvider);
    const chainId = await originalProvider.getNetwork().then(net => net.chainId);
    const accountAPI = BaseAccountAPI_1.BaseAccountAPI.create(config.implementation.accountAPIClass, {
        // Use our own provider because some providers like Magic doesn't support custom errors, which
        // we rely on for getting counterfactual address
        // Unless it's hardhat.
        provider: chainId === 31337 ? originalProvider : new ethers_1.ethers.providers.JsonRpcProvider((0, utils_1.getRpcUrl)(chainId)),
        entryPointAddress: entryPoint.address,
        owner: originalSigner,
        index: config.index,
        factoryAddress: config.implementation.factoryAddress,
        paymasterAPI: config.paymasterAPI,
        accountAddress: config.walletAddress
    });
    debug('config=', config);
    const httpRpcClient = new HttpRpcClient_1.HttpRpcClient(config.bundlerUrl, config.entryPointAddress, chainId, config.projectId);
    return await new ZeroDevProvider_1.ZeroDevProvider(chainId, config, originalSigner, originalProvider, httpRpcClient, entryPoint, accountAPI).init();
}
exports.wrapProvider = wrapProvider;
//# sourceMappingURL=Provider.js.map