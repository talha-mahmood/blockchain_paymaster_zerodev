"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSocialWalletOwner = exports.getRPCProviderOwner = exports.getPrivateKeyOwner = void 0;
const ethers_1 = require("ethers");
const api = __importStar(require("./api"));
const constants = __importStar(require("./constants"));
function getPrivateKeyOwner(privateKey) {
    return new ethers_1.ethers.Wallet(privateKey);
}
exports.getPrivateKeyOwner = getPrivateKeyOwner;
function getRPCProviderOwner(web3Provider) {
    const provider = new ethers_1.ethers.providers.Web3Provider(web3Provider);
    return provider.getSigner();
}
exports.getRPCProviderOwner = getRPCProviderOwner;
async function getSocialWalletOwner(projectId, socialWallet) {
    const response = await api.getProjectConfiguration(projectId, constants.BACKEND_URL);
    let openloginAdapterSettings = {};
    if (response.signature !== undefined) {
        openloginAdapterSettings = {
            originData: {
                [window.location.origin]: response.signature
            }
        };
    }
    const provider = new ethers_1.ethers.providers.Web3Provider(await socialWallet.connect(response.chainId, openloginAdapterSettings));
    return provider.getSigner();
}
exports.getSocialWalletOwner = getSocialWalletOwner;
//# sourceMappingURL=owner.js.map